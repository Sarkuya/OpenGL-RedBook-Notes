<?xml version="1.0" encoding="UTF-8"?>

<chapter xmlns="http://docbook.org/ns/docbook"
         xmlns:xlink="http://www.w3.org/1999/xlink"
         xml:id="Chapter_Quick_Start">

  <title>OpenGL Quick Start</title>
  <para>We will start OpenGL programming in a quick way.</para>

  <section>
    <title>About OpenGL</title>
    <para>OpenGL is a great graphics API.</para>
  </section>

  <section>
    <title>OpenGL Background Concepts</title>
    <para>You are not dealing with a task as easy as driving or using a computer in OpenGL programming. Rather, you are making a car, or making a computer. It might frighten you, but it's not the fact. To help you achieve such goals, OpenGL API has sent many professors to stand by your side. So, your mission is to understand what you are doing, get to know what tasks these professors can do, and what tasks they can't do, and then issue right commands to them. Then your mission is accomplished.</para>
    <para>Before we begin to build our first OpenGL application, we get to have some OpenGL programming concepts in background.</para>

    <section>
      <title>About Client-Server Programming Mode</title>
      <para>OpenGL is a client-server system, which has 2 meanings:</para>
      <orderedlist>
        <listitem>
          <para>In a network, the client will issue OpenGL commands, while the server will render the image;</para>
        </listitem>
        <listitem>
          <para>In the same computer, the client is the application you'are writing, while the server is OpenGL implemetation of the graphics hardware.</para>
        </listitem>
      </orderedlist>
      <para>So, when we are writing an OpenGL application at most time in a single computer, we are actually making use of the functionality of the specific graphics card installed in our computer to render the images.</para>
    </section>

    <section>
      <title>About Rendering</title>
      <para>A pixel is a smallest visual element in screen. No matter how the rendered image is complicated, it is composited of various of pixels. Each pixel has attributes such as position, color, etc.</para>
      <para> For each pixel, graphics card has corresponding memory to store its information. And when we put or modify the data in these memories, images on the screen will reflect immediately. These memories are called <emphasis>framebuffer</emphasis>.</para>
      <para>However, we are <emphasis>NOT</emphasis> to find where these framebuffers are and manage the data in it. That's boring.</para>
      <para> We are doing a more easier job here. We specify vertices' position and color in client in some coordinate systems that we are familiar with, and it's the responsibility of OpenGL to map them in framebuffers. This is called <emphasis>rasterization</emphasis>.</para>
    </section>

    <section>
      <title>About VAOs and VBOs</title>
      <para>In order to improve performence, some data in our application would nevertheless be copied to buffers. Again, it's easy since we care about only what to copy and <emphasis>NOT</emphasis> how to copy. </para>
      <para>In a client-server network, the client computer issues OpenGL commands to the server through the network. The client might issue lots of drawing command at the same time. If we send the vetex data each time along with drawing commands, the netwok's inefficiency is obvious.</para>
      <para>OpenGL take such a approach - OpenGL server created vertex-buffer objects (<emphasis>VBO</emphasis><indexterm><primary>VBO</primary><see>Vertex-Buffer Object</see></indexterm><indexterm><primary>Vertex-Buffer Object</primary></indexterm>) to allocate memory chunks to store the vetices data, tagged (or indexed) with the vertex array object (<emphasis>VAO</emphasis><indexterm><primary>VAO</primary><see>Vertex Array Object</see></indexterm><indexterm><primary>Vertex Array Object</primary></indexterm>) names. And each time the OpenGL application needs to render images using these vetices data, it does not actually transfer vertices data from the client, it just tell OpenGL server that it would like to use which VAO's buffer data by rebinding a specific VAO as the current VAO.</para>
      <para>So, when receiving drawing commands from the client, OpenGL server fetches the vetices data previously saved from the buffer tagged with specific VAO name instead of from the client, and sends these data to the framebuffer immediately.</para>
      <para>The same rule applies to non-network client-server mode. In this mode, the OpenGL server is the computer hosting the OpenGL program, and still it is the OpenGL server who manages the VAOs and VBOs.</para>
    </section>

    <section>
      <title>About Shaders</title>
      <para>OpenGL shaders are some programs compiled for and executed by the <emphasis>GPU</emphasis><indexterm><primary>GPU</primary><see>Graphics Processing Uint</see></indexterm> (Graphics Processing Uint<indexterm><primary>Graphics Processing Uint</primary></indexterm>).</para>
      <para>Graphics hardware has a small but very fast memory. To efficiently improve performence, some fundermental data, such as vertex position, vetex color, etc, can be stored in this memory area.</para>
      <para>We need to supply these data to shaders in a specific way - a shading way.</para>
    </section>
  </section>

  <section>
    <title>OpenGL Application Basic Structure</title>
    <para>In general, when we are coding in an OpenGL program, we usually do the following things:</para>
    <orderedlist>
      <listitem>
        <para>In a setup-up routine:</para>
        <orderedlist>
          <listitem><para>Create a VAO and bind it to current VAO.</para></listitem>
          <listitem><para>Supply with vetices data, and store them in VBO.</para></listitem>
        </orderedlist>
      </listitem>
      <listitem>
        <para>In a displaying routine:</para>
        <orderedlist>
          <listitem>
            <para>Rebind a VAO to current VAO.</para>
          </listitem>
          <listitem>
            <para>Issue drawing commands.</para>
          </listitem>
        </orderedlist>
      </listitem>
    </orderedlist>
  </section>

  <section>
    <title>Setup IDE in Windows</title>
    <para>We are going to write and run OpenGL programs in Visual Studio.</para>
  </section>

  <section>
    <title>Our First OpenGL Application</title>
    <example>
      <title>triangles.cpp</title>
      <programlisting><![CDATA[#include <iostream>

#include "vgl.h"
#include "LoadShaders.h"

using namespace std;

const int WINDOW_WIDTH = 500;
const int WINDOW_HEIGHT = 500;

GLuint    VAOs[1];
GLuint Buffers[1];

const GLuint NumVertices = 6;

void centerWindow() {
	glutInitWindowSize(WINDOW_WIDTH, WINDOW_HEIGHT);
	glutInitWindowPosition((glutGet(GLUT_SCREEN_WIDTH) - WINDOW_WIDTH) / 2, (glutGet(GLUT_SCREEN_HEIGHT) - WINDOW_HEIGHT) / 2);
}

void compileShaders() {
	ShaderInfo shaders[] = {
		{ GL_VERTEX_SHADER, "vs.glsl" },
		{ GL_FRAGMENT_SHADER, "fs.glsl" },
		{ GL_NONE, NULL }
	};

	GLuint program = LoadShaders(shaders);
	glUseProgram(program);
}

void init(void) {
	glGenVertexArrays(1, VAOs);
	glBindVertexArray(VAOs[0]);

	GLfloat vertices[NumVertices][2] = {
		{ -0.90, -0.90 },  // Triangle 1
		{  0.85, -0.90 },
		{ -0.90,  0.85 },
		{  0.90, -0.85 },  // Triangle 2
		{  0.90,  0.90 },
		{ -0.85,  0.90 },
	};

	glGenBuffers(1, Buffers);
	glBindBuffer(GL_ARRAY_BUFFER, Buffers[0]);
	glBufferData(GL_ARRAY_BUFFER, sizeof(vertices), vertices, GL_STATIC_DRAW);

	compileShaders();

	glVertexAttribPointer(0, 2, GL_FLOAT, GL_FALSE, 0, BUFFER_OFFSET(0));
	glEnableVertexAttribArray(0);

	glClearColor(1, 1, 1, 1);
}

void display() {
	glClear(GL_COLOR_BUFFER_BIT);

	glBindVertexArray(VAOs[0]);
	glDrawArrays(GL_TRIANGLES, 0, NumVertices);

	glFlush();
}

int main(int argc, char** argv) {
	glutInit(&argc, argv);

	glutInitDisplayMode(GLUT_RGBA);

	centerWindow();

	//glutInitContextVersion(3, 2);
	glutInitContextProfile(GLUT_CORE_PROFILE);

	glutCreateWindow("Triangles");

	if (glewInit() != GLEW_OK) {
		cerr << "Unable to initialize GLEW ... exiting" << endl;
		exit(EXIT_FAILURE);
	}

	if (GLEW_VERSION_4_4) {
		cout << "Your graphics hardware supports OpenGL 4.4!" << endl;
	}
	else if (GLEW_VERSION_3_3) {
		cout << "Your graphics hardware supports OpenGL 3.3!" << endl;
	}

	init();

	glutDisplayFunc(display);
	glutMainLoop();
}]]></programlisting>
    </example>
  </section>

  <section>
    <title>Triangles In Detail</title>
    <section>
      <title>What We Do in <function>init</function> Routine</title>
      <orderedlist>
        <listitem><para>Generate and bind a vertex array</para></listitem>
        <listitem><para>Copy the data in vertex array to a buffer</para></listitem>
        <listitem><para>Compile shaders</para></listitem>
        <listitem><para>Tell the OpenGL how to use the buffer to feed to the shader</para></listitem>
      </orderedlist>
    
      <section>
        <title>Creating and Binding a Vertex Array Object (VAO)</title>
        <funcsynopsis>
          <funcprototype>
            <funcdef>void <function>glGenVertexArrays</function></funcdef>
            <paramdef>GLsizei <parameter>n</parameter></paramdef>
            <paramdef>GLuint* <parameter>arrays</parameter></paramdef>
          </funcprototype>
        </funcsynopsis>
        <para>Applied for new vertex array object names. OpenGL manages these names. Names are nothing but of type <parameter>GLuint</parameter> to identify the VAO that will be generated by the succeeding invocation of <function>glBindVertexArray</function>.</para>
        <funcsynopsis>
          <funcprototype>
            <funcdef>void <function>glBindVertexArray</function></funcdef>
            <paramdef>GLuint <parameter>array</parameter></paramdef>
          </funcprototype>
        </funcsynopsis>
        <para>When parameter <parameter>array</parameter> is first bound, a new VAO will be created. And only at this binding point, the VAO's state and type are acquired.</para>
      </section>
    
      <section>
        <title>Creating and Populating a Vertex-Buffer Object (VBO)</title>
        <para>All data should be stored in buffer objects before drawing. Drawing means transfering the vertex data to OpenGL server.</para>
        <funcsynopsis>
          <funcprototype>
            <funcdef>void <function>glGenBuffers</function></funcdef>
            <paramdef>GLsizei <parameter>n</parameter></paramdef>
            <paramdef>GLuint* <parameter>buffers</parameter></paramdef>
          </funcprototype>
          <funcprototype>
            <funcdef>void <function>glBindBuffer</function></funcdef>
            <paramdef>GLenum <parameter>target</parameter></paramdef>
            <paramdef>GLuint <parameter>buffer</parameter></paramdef>
          </funcprototype>
        </funcsynopsis>
        <para>We need to set up data in a VBO associated with current VAO. With parameter target specified with <constant>GL_ARRAY_BUFFER</constant>, <function>glBindBuffer</function> creates a new VBO and set it as current VBO.</para>
        <funcsynopsis>
          <funcprototype>
            <funcdef>void <function>glBufferData</function></funcdef>
            <paramdef>GLenum <parameter>target</parameter></paramdef>
            <paramdef>GLsizeiptr <parameter>size</parameter></paramdef>
            <paramdef>const GLvoid* <parameter>data</parameter></paramdef>
            <paramdef>GLenum <parameter>usage</parameter></paramdef>
          </funcprototype>
        </funcsynopsis>
        <para><function>glBufferData</function> populates current VBO with parameter <parameter>data</parameter>.</para>
      </section>
    
      <section>
        <title>Compiling and Linking with Shaders</title>
        <para>We grouped all functions relating to shaders into a function <function>compileShaders</function>. In it, we call <function>loadShaders</function> to load two shader files (<filename>vs.glsl</filename> and <filename>fs.glsl</filename>), compile them, attach them to a shaper program, link the program, and use the program. Until then, these shaders has connection with the OpenGL application.</para>
        <para>Although the whole process of compiling and linking is critical for shading programming, at this time, we'd rather take it as a black box to make learning easier.</para>
      </section>

      <section>
        <title>Feeding data to Shaders</title>
        <para>Vertex shaders and fragment shaders are both required for shading in OpenGL version 3.1 or greater.</para>
        <para>In Triangle project, <filename>vs.glsl</filename> is the vertex shader and <filename>fs.glsl</filename> is the fragment shader.</para>
        <para>Look at <filename>vs.glsl</filename> first.</para>
        <programlisting><![CDATA[#version 430 core

layout (location = 0) in vec4 vPosition;

void main() {
	gl_Position = vPosition;
}
]]></programlisting>
        <para><varname>gl_Position</varname> is a special shader variable provided by OpenGL used to transfer vertex data to GPU. Each time OpenGL needs vertex data, it will execute vertex shader and fetch it from <varname>gl_Position</varname>. All we need is only assigning this variable with what we want.</para>
        <para>In previous code, we assigned the value of <varname>vPosition</varname> to <varname>gl_Position</varname>.</para>
        <para><varname>vPosition</varname> is a global variable we declared in shader to receive the data from buffer data of type vec4. We might have serval such variables, and all of them has a location starting from 0.</para>
        <para>Up till now, the issue remains how to feed vertex data from buffer to <varname>vPosition</varname> in shader. We do it via <function>glVertexAttribPointer</function>.</para>
        <funcsynopsis>
          <funcprototype>
            <funcdef>void <function>glVertexAttribPointer</function></funcdef>
            <paramdef>GLuint <parameter>index</parameter></paramdef>
            <paramdef>GLint <parameter>size</parameter></paramdef>
            <paramdef>GLenum <parameter>type</parameter></paramdef>
            <paramdef>GLboolean <parameter>normalized</parameter></paramdef>
            <paramdef>GLsizei <parameter>stride</parameter></paramdef>
            <paramdef>const GLvoid* <parameter>pointer</parameter></paramdef>
          </funcprototype>
        </funcsynopsis>
        <para>We just set up a VBO and populates it with some data. Parameter <parameter>index</parameter> decides to which vertex shading variable we want to feed with the data in current VBO, identified with shader variable's location just mentioned. And the rest parameters of <function>glVertexAttribPointer</function> are to tell OpenGL how to set the pointer correctly each time it needs vertex data from VBO.</para>
        <para>As a programmer, we do not actually transfer the data from buffer to shader. Rather, we define a pointer pointing to the buffer data, and each time, when the OpenGL needs a vertex data, it will fetch data based on this pointer and then move the pointer foreaward in background. This is why the function name consists of "Pointer". </para>
        <para>Yet it is not obvious now what "vertex attrib" means, in a VBO that only consists of all data of vertex location as above.</para>
        <para>In some vertex arrays, if we need, we can store both vertex position and vetex color information in it as following:</para>
        <programlisting><![CDATA[GLfloat vertex_info[] = {
  -1.0f, -1.0f,        // first vertex position
  1.0f,  0.0f,  0.0f,  // first vertex color

  1.0f, -1.0f,         // second vertex position
  0.0f,  1.0f,  0.0f,  // second vertex color

  0.0f,  1.0f,         // third vertex position
  0.0f,  0.0f,  1.0f   // third vertex color
};
]]></programlisting>
        <para><varname>vertex_info</varname> has 3 pairs of vertex information, each pair consists of vertex position and vertex color. We say we have 2 kinds of vertex attributes in it.</para>
        <para>The vertex position and color are stored alternately in buffer memory. In such circumstance, we can define 2 vertex attribute pointers pointing to position and color respectively. Here is how:</para>
        <programlisting><![CDATA[glVertexAttribPointer(0, 2, GL_FLOAT, GL_FALSE, sizeof(GL_FLOAT) * 5, BUFFER_OFFSET(0));                     // position
glVertexAttribPointer(1, 3, GL_FLOAT, GL_FALSE, sizeof(GL_FLOAT) * 5, BUFFER_OFFSET(sizeof(GL_FLOAT) * 2));  // color
]]></programlisting>
        <para>The code <code>sizeof(GL_FLOAT) * 5</code> means for every other 5 <constant>GL_FLOAT</constant>s, there would be a position and color vertex attribute. And the color attributes begins after 2 <constant>GL_FLOAT</constant>s.</para>
        <para>And the code for <filename>fs.glsl</filename>:</para>
        <programlisting><![CDATA[#version 430 core

out vec4 fColor;

void main() {
    fColor = vec4(0.0, 0.0, 1.0, 1.0);
}
]]></programlisting>
        <para>We assign a blue color to every vertex by using the out variable <varname>fColor</varname>.</para>
        <para>As you have seen, vertex shading determines the primivtive's position, and fragment shading determines the primitive's color.</para>
        <para>After setting up the pointer, we need to enable the pointer by using <function>glEnableVertexAttribArray</function>.</para>
      </section>
    </section>

    <section>
      <title>What We Do in <function>display</function> Routine</title>
      <para>Compared with <function>init</function> routine, codes in <function>display</function> routine are very simple.</para>
      <para>We can take each VAO as an index of buffer memory that has been allocated previously. When we need to use one of such buffer memory, we rebind a certain VAO as the current VAO using <function>glBlindVertexArray</function> again, then the whole memory block under that VAO is available for OpenGL to be used to render images.</para>
      <para>Then we use <function>glDrawArrays</function> to render images.</para>
      <funcsynopsis>
        <funcprototype>
          <funcdef>void <function>glDrawArrays</function></funcdef>
          <paramdef>GLenum <parameter>mode</parameter></paramdef>
          <paramdef>GLint <parameter>first</parameter></paramdef>
          <paramdef>GLsizei <parameter>count</parameter></paramdef>
        </funcprototype>
      </funcsynopsis>
      <para><function>glDrawArrays</function> renders primitives using the array data from current VBO under current VAO. It uses count sequential elements, starting from first element, from each enabled array, to construct a sequence of primitives of type mode.</para>
      <para></para>
      <para></para>
      <para></para>
      <para></para>
      <para></para>
      <para></para>
      <para></para>
      <para></para>
    </section>
  </section>
  
  <section>
    <title>References</title>
    <orderedlist>
      <listitem><para>OpenGL 4.5 Reference Pages, opengl.org: <link xlink:href="https://www.opengl.org/sdk/docs/man/" /></para></listitem>
      <listitem><para>OpenGL SDK Manual Source, opengl.org: <link xlink:href="https://cvs.khronos.org/svn/repos/ogl/trunk/ecosystem/public/sdk/docs/man4/" /></para></listitem>
    </orderedlist>
  </section>

</chapter>